package gamejam: game;

interface game-host {
  record interactable {
    message: string,
    range: f32
  }

  record collider {
    physical: bool,
    width: f32,
    height: f32
  }

  enum rigid-body-type {
    static-body,
    dynamic
  }

  variant insertable-components {
    attackable,
    collider(collider),
    enemy,
    interactable(interactable),
    rigid-body(rigid-body-type),
  }

  variant event-data {
    trigger(u32)
  }

  record event {
    topic: u32,
    data: event-data
  }

  enum direction {
    west, east
  }

  variant input {
    movement(tuple<f32, f32>),
    jump
  }

  // player and self specific world data
  record entity-uniform {
    position: tuple<f32, f32>,
    facing: direction,
    health: option<u32>,
    is-parrying: bool
  }

  publish-event: func(evt: event);
  set-ticking: func(do-tick: bool, distance: option<f32>);

  get-game-data-kv: func(key: string) -> option<string>;
  set-game-data-kv: func(key: string, value: string) -> option<string>;
  get-game-data-kv-int: func(key: string) -> option<s32>;
  set-game-data-kv-int: func(key: string, value: s32) -> option<s32>;

  remove-component: func(type-path: string);
  insert-components: func(components: list<insertable-components>);
  play-animation: func(sprite-name: string, animation-name: string, duration-millis: u32, direction: direction, repeating: bool);
  level-transition: func(index: u32, target-spawner: string);
  request-timer-callback: func(timer: u32, millis: u32);
  despawn-entity: func(entity-id: u64);


  face-direction: func(direction: direction);
  get-player-uniform: func() -> entity-uniform;
  get-self-uniform: func() -> entity-uniform;
  can-see-player: func() -> bool;

  // gameplay calls
  send-input: func(input: input);
  schedule-attack: func(delay: u32, damage: u32, force: f32, point: tuple<f32, f32>, vector: tuple<f32, f32>);
}
